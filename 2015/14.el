(defun read-file (filename)
  "Get the contents of FILENAME as a string"
  (with-temp-buffer
    (insert-file-contents filename)
    (nbutlast (split-string (buffer-string) "\n"))))
(defun parse (str)
  "Return a list like (name (speed fly-time rest-time))"
  (let ((words (split-string str) ))
    (list (car words)
          (list (string-to-number (nth  3 words))
                (string-to-number (nth  6 words))
                (string-to-number (nth 13 words))))))
(defun dist (deer n)
  (letrec ((name (car deer))
           (lst (cadr deer))
           (speed (car lst))
           (time (cadr lst))
           (rest (caddr lst))
           (cycle (+ time rest))
           (ncycles (/ n cycle))
           (remain (% n cycle))
           (from-full-cycles (* speed time ncycles))
           (from-remain (* speed (min time remain))))
    (+ from-full-cycles from-remain)))
(defun mapcar* (f &rest xs)
  "MAPCAR for multiple sequences"
  (if (not (memq nil xs))
      (cons (apply f (mapcar 'car xs))
            (apply 'mapcar* f (mapcar 'cdr xs)))))
(defun points (deer score n)
  (cond ((zerop n) score)
        (t (letrec ((dists (mapcar (lambda (x) (dist x n)) deer))
                    (m (apply 'max dists))
                    (winners (mapcar
                              (lambda (x) (if (= x m) 1 0)) dists)))
             (points deer (mapcar* '+ score winners) (- n 1))))))
(defun points (deer score n)
  (progn
    (while (> n 0)
      (letrec ((dists (mapcar (lambda (x) (dist x n)) deer))
               (m (apply 'max dists))
               (winners (mapcar (lambda (x) (if (= x m) 1 0)) dists)))
        (setq score (mapcar* '+ score winners))
        (setq n (1- n))))
    score))
(setq reindeer (mapcar 'parse (read-file "14.txt")))
(setq part-a (apply 'max (mapcar (lambda (x) (dist x 2503)) reindeer)))
(setq part-b
      (apply 'max
             (points reindeer (mapcar (lambda (x) 0) reindeer) 2503)))
(progn (princ part-a) (princ " ") (princ part-b) (princ "\n"))
